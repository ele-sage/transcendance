
## HTTP Status Response Codes
- (2xx) Success
    * 200 Success - The request has succeeded.
    * 201 Created - The request has been fulfilled and resulted in a new resource being created.
    * 202 Accepted - The request has been accepted for processing, but the processing has not been completed.
- (3xx) Redirections
    * 301 Moved Permanently - The requested resource has been assigned a new permanent URI and any future references to this resource should use one of the returned URIs.
    * 302 Found - The requested resource resides temporarily under a different URI.
    * 304 Not Modified - The resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.
- (4xx) Client Errors
    * 400 Bad Request - The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.
    * 401 Unauthorized - The request requires user authentication.
    * 403 Forbidden - The server understood the request, but is refusing to fulfill it.
    * 404 Not Found - The server has not found anything matching the Request-URI.
    * 405 Method Not Allowed - The method specified in the Request-Line is not allowed for the resource identified by the Request-URI.
    * 409 Conflict - The request could not be completed due to a conflict with the current state of the resource.
    * 410 Gone - The requested resource is no longer available at the server and no forwarding address is known.
    * 429 Too Many Requests - The user has sent too many requests in a given amount of time.
- (5xx) Server Errors
    * 500 Internal Server Error - The server encountered an unexpected condition which prevented it from fulfilling the request.
    * 501 Not Implemented - The server does not support the functionality required to fulfill the request.
    * 503 Service Unavailable - The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.

## RESTful APIs
    Some Requierments:
    * a base URI ex: http:/ex.com/api/
    * standard HTTP methods (GET, POST, PUT, DELETE)
    * include media type to define state transition data elements (JSON, XML, HTML, etc)
    * stateless communication (no client context is stored on the server between requests)
        - Important to take into account for authentication and authorization

## Endpoints
  Ex:
    - http://ex.com/api/users/      -> (GET, POST) all users
    - http://ex.com/api/users/1     -> (GET, PUT, DELETE) user with id 1
    - http://ex.com/api/users/1/posts/ -> (GET, POST) all posts from user with id 1
    - http://ex.com/api/users/1/posts/1 -> (GET, PUT, DELETE) post with id 1 from user with id 1
